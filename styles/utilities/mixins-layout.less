/* -----------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
utilities/mixins-layout.less
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
----------------------------------------------------------------------------- */



/* -----------------------------------------------------------------------------
Clearfix
----------------------------------------------------------------------------- */

.clearfix {

    *zoom: 1;

    &:before,
    &:after {

        display: table;
        content: "";
        line-height: 0;

    }

    &:after {

        clear: both;

    }

}

/* -----------------------------------------------------------------------------
IE7 Fixes
----------------------------------------------------------------------------- */

.ie7-inline-block() {

    *display: inline;
    *zoom: 1;

}

.ie7-restore-left-whitespace() {

    *margin-left: .3em;

    &:first-child {

        *margin-left: 0;

    }

}

.ie7-restore-right-whitespace() {

    *margin-right: .3em;

}

/* -----------------------------------------------------------------------------
Focus
----------------------------------------------------------------------------- */

.tab-focus() {

    outline: thin dotted #333;
    outline: 5px auto -webkit-focus-ring-color;
    outline-offset: -2px;

}

/* -----------------------------------------------------------------------------
Center Block Elements
----------------------------------------------------------------------------- */

.center-block() {

    display: block;
    margin-left: auto;
    margin-right: auto;

}

/* -----------------------------------------------------------------------------
Sizing
----------------------------------------------------------------------------- */

.size(@width; @height) {

    width: @width;
    height: @height;
    behavior: url("@{css3pie-path}PIE.php");

}

.square(@size) {

    .size(@size; @size);

}

.backface-visibility(@visibility){

  backface-visibility: @visibility;

}

.background-clip(@clip) {

  background-clip: @clip;

}

.background-size(@size) {

  background-size: @size;

}

.box-sizing-padding-vertical(@height, @content-height) when (@height > @content-height) {

  padding-top: ((@height - @content-height) / 2);
  padding-bottom: ((@height - @content-height) / 2);

}

.box-sizing-padding-vertical(@height, @content-height) when (@height <= @content-height) {

  padding-top: 0px;
  padding-bottom: 0px;

}

/* -----------------------------------------------------------------------------
Transformations
----------------------------------------------------------------------------- */

.transform(@transform) {

  transform: @transform;

}

.rotate(@degrees) {

  transform: rotate(@degrees);

}

.scale(@ratio) {

  transform: scale(@ratio);

}

.scale(@ratio-x, @ratio-y) {

  transform: scale(@ratio-x, @ratio-y);

}

.scale3d(@ratio-x, @ratio-y, @ratio-z) {

  transform: scale3d(@ratio-x, @ratio-y, @ratio-z);

}

.translate(@x, @y) {

  transform: translate(@x, @y);

}

.translateX(@x) {

  transform: translateX(@x);

}

.translateY(@y) {

  transform: translateY(@y);

}

.translateZ(@z) {

  transform: translateZ(@z);

}

.skew(@x, @y) {

  transform: skew(@x, @y);
  backface-visibility: hidden;

}

.translate3d(@x, @y, @z) {

  transform: translate3d(@x, @y, @z);

}



/* -----------------------------------------------------------------------------
Shape layout Variant
----------------------------------------------------------------------------- */

.shape-layout-variant (@element, @size) {

  .layout-variant (@element, margin-top, @size);
  .layout-variant (@element, margin-bottom, @size);
  .layout-variant (@element, margin-left, @size);
  .layout-variant (@element, margin-right, @size);
  .layout-variant (@element, padding-top, @size);
  .layout-variant (@element, padding-bottom, @size);
  .layout-variant (@element, padding-left, @size);
  .layout-variant (@element, padding-right, @size);

}

.shape-layout-variant(@element, @class, @size) {

  &.@{element}-@{class} {

    .layout-variant (@element, @class, margin-top, @size);
    .layout-variant (@element, @class, margin-bottom, @size);
    .layout-variant (@element, @class, margin-left, @size);
    .layout-variant (@element, @class, margin-right, @size);
    .layout-variant (@element, @class, padding-top, @size);
    .layout-variant (@element, @class, padding-bottom, @size);
    .layout-variant (@element, @class, padding-left, @size);
    .layout-variant (@element, @class, padding-right, @size);

  }

  &.@{element}-@{class}-top {

    .layout-variant (@element, @class, margin-top, @size);
    .layout-variant (@element, @class, padding-top, @size);

  }

  &.@{element}-@{class}-bottom {

    .layout-variant (@element, @class, margin-bottom, @size);
    .layout-variant (@element, @class, padding-bottom, @size);

  }

  &.@{element}-@{class}-left {

    .layout-variant (@element, @class, margin-left, @size);
    .layout-variant (@element, @class, padding-left, @size);

  }

  &.@{element}-@{class}-right {

    .layout-variant (@element, @class, margin-right, @size);
    .layout-variant (@element, @class, padding-right, @size);

  }

}

/* -----------------------------------------------------------------------------
Layout Variant
----------------------------------------------------------------------------- */

.layout-variant (@element, @property, @size) when (@size = null) {

  @element-property: "@{element}-@{property}";

  & when not (@@element-property = null) {

    @{property}: @@element-property;

  }

}

.layout-variant (@element, @property, @size) when not (@size = null) {

  @element-property: "@{element}-@{property}";
  @element-scale: "@{element}-@{property}-@{size}";

  & when not (@@element-property = null) and not (@@element-scale = null) {

    @{property}: @@element-property * @@element-scale;

  }

}

.layout-variant (@element, @class, @property, @size) when (@size = null) {

  @element-property: "@{element}-@{property}";
  @element-subclass-scale: "@{element}-@{class}-@{property}-scale";

  & when not (@@element-property = null) and not (@@element-subclass-scale = null) {

    @{property}: @@element-property * @@element-subclass-scale;

  }

}

.layout-variant (@element, @class, @property, @size) when not (@size = null) {

  @element-property: "@{element}-@{property}";
  @element-scale: "@{element}-@{property}-@{size}";
  @element-subclass-scale: "@{element}-@{class}-@{property}-scale";

  & when not (@@element-property = null) and not (@@element-scale = null) and not (@@element-subclass-scale = null) {

    @{property}: @@element-property * @@element-scale * @@element-subclass-scale;

  }

}

/* -----------------------------------------------------------------------------
Pod
----------------------------------------------------------------------------- */

.pod (@variant, @screen-size) when (@variant = null) {

  @pod-class: replace(e('pod-@{variant}'), '-null', '');
  @pod-screen-size-class: replace("@{pod-class}-@{screen-size}", '-null', '');

  .shape-layout-variant(pod, @screen-size);

}

.pod (@variant, @screen-size) when not (@variant = null) {

  @pod-class: replace(e('pod-@{variant}'), '-null', '');
  @pod-screen-size-class: replace("@{pod-class}-@{screen-size}", '-null', '');

  &.@{pod-class} {

    .shape-layout-variant(pod, @variant, @screen-size);

  }

  &.@{pod-screen-size-class} {

    .shape-layout-variant(pod, @variant, @screen-size);

  }

}


/* -----------------------------------------------------------------------------
Generate Index Suffixed Properties for Flex Items
----------------------------------------------------------------------------- */

.flex-item-property-loop (@class, @property, @screen, @index, @end) when (@index >= @end) {

  @class-name: replace(e('@{class}-@{index}-@{screen}'), '-null', '');

  .@{class-name} {

    @{property}: @index;

  }

  .flex-item-property-loop(@class, @property, @screen, @index - 1, @end);
}

.flex-item-property-loop (@class, @property, @screen, @index, @end) when (@index < @end) {

}



/* -----------------------------------------------------------------------------
Container
----------------------------------------------------------------------------- */

.container(@class, @variant, @screen-size) {

  @container-class: replace(replace(replace(e('container-@{class}-@{variant}'), '-null', ''), '-null', ''), '-null', '');
  @container-width: replace(replace(e('container-@{class}-width-@{screen-size}'), '-null', ''), '-null', '');
  @container-gutter-width: replace(replace(e('container-@{class}-gutter-width-@{screen-size}'), '-null', ''), '-null', '');
  @container-variant-scale: replace(replace(e('container-@{class}-@{variant}-margin-scale'), '-null', ''), '-null', '');

  .@{container-class} {

    & when not (@@container-width = null) {

      width: @@container-width;

    }

    & when not (@@container-gutter-width = null) {

      & when (@variant = null) {

        margin-left: @@container-gutter-width;
        margin-right: @@container-gutter-width;

      }

      & when not (@variant = null) {

        & when not (@@container-variant-scale = null) {

          margin-left: @@container-gutter-width * @@container-variant-scale;
          margin-right: @@container-gutter-width * @@container-variant-scale;

        }

      }

    }

  }

  .@{container-class}-left {

    & when not (@@container-gutter-width = null) {

      & when (@variant = null) {

        margin-left: @@container-gutter-width;

      }

      & when not (@variant = null) {

        & when not (@@container-variant-scale = null) {

          margin-left: @@container-gutter-width * @@container-variant-scale;

        }

      }

    }

  }

  .@{container-class}-right {

    & when not (@@container-gutter-width = null) {

      & when (@variant = null) {

        margin-right: @@container-gutter-width;

      }

      & when not (@variant = null) {

        & when not (@@container-variant-scale = null) {

          margin-right: @@container-gutter-width * @@container-variant-scale;

        }

      }

    }

  }

}

/* -----------------------------------------------------------------------------
Row
----------------------------------------------------------------------------- */

.row(@screen-size) {

  .row {

    @screen: replace(replace(@screen-size, 'screen-', '-screen-'), 'null', '');

    @gutter-width: "grid-gutter-width@{screen}";
    @gutter-height: "grid-gutter-height@{screen}";

    & when not (@@gutter-width = null) {

      margin-left: @@gutter-width * -0.5;
      margin-right: @@gutter-width * -0.5;

    }

    & when not (@@gutter-height = null) {

      //margin-top: @@gutter-height * -0.5;
      //margin-bottom: @@gutter-height * -0.5;

    }

    &:extend(.clearfix all);

  }

}

/* -----------------------------------------------------------------------------
Grid
----------------------------------------------------------------------------- */

.grid (@screen-size, @grid-columns-count, @grid-gutter-width, @grid-gutter-height) {

  .calculate-grid-columns-padding(@screen-size, @grid-columns-count, @grid-gutter-width, @grid-gutter-height);
  .calculate-grid-columns(@screen-size, @grid-columns-count, @grid-columns-count, width);
  .calculate-grid-columns(@screen-size, @grid-columns-count, @grid-columns-count, push);
  .calculate-grid-columns(@screen-size, @grid-columns-count, @grid-columns-count, pull);
  .calculate-grid-columns(@screen-size, @grid-columns-count, @grid-columns-count, offset);

}

/* -----------------------------------------------------------------------------
Column Padding
----------------------------------------------------------------------------- */

.calculate-grid-columns-padding(@screen-size, @grid-columns-count, @grid-gutter-width, @grid-gutter-height) {

  .column(@screen-size, @index, @grid-columns-count, @grid-gutter-width, @grid-gutter-height) when (@index = 1) {

    @item: ~".column-@{index}, .column-small-@{index}, .column-medium-@{index}, .column-large-@{index}, .column-jumbo-@{index}";

    .column(@screen-size, (@index + 1), @grid-columns-count, @grid-gutter-width, @grid-gutter-height, @item);

  }

  .column(@screen-size, @index, @grid-columns-count, @grid-gutter-width, @grid-gutter-height, @list) when (@index =< @grid-columns-count) {

    @item: ~".column-@{index}, .column-small-@{index}, .column-medium-@{index}, .column-large-@{index}, .column-jumbo-@{index}";

    .column(@screen-size, (@index + 1), @grid-columns-count, @grid-gutter-width, @grid-gutter-height, ~"@{list}, @{item}");

  }

  .column(@screen-size, @index, @grid-columns-count, @grid-gutter-width, @grid-gutter-height, @list) when (@index > @grid-columns-count) and (@screen-size = null) {

    @{list} {

      position: relative;
      min-height: 1px;
      padding-left:  (@grid-gutter-width / 2);
      padding-right: (@grid-gutter-width / 2);
      //margin-top:  (@grid-gutter-width / 2);
      //margin-bottom: (@grid-gutter-width / 2);

    }

  }

  .column(@screen-size, @index, @grid-columns-count, @grid-gutter-width, @grid-gutter-height, @list) when (@index > @grid-columns-count) {

    @{list} {

      padding-left:  (@grid-gutter-width / 2);
      padding-right: (@grid-gutter-width / 2);
      //margin-top:  (@grid-gutter-width / 2);
      //margin-bottom: (@grid-gutter-width / 2);

    }

  }

  .column(@screen-size, 1, @grid-columns-count, @grid-gutter-width, @grid-gutter-height);

}

/* -----------------------------------------------------------------------------
Calculate Grid Columns
----------------------------------------------------------------------------- */

.calculate-grid-columns(@screen-size, @column-index, @grid-columns-count, @attribute) when (@column-index >= 0) {

  .calculate-grid-column(@screen-size, @column-index, @grid-columns-count, @attribute);
  .calculate-grid-columns(@screen-size, (@column-index - 1), @grid-columns-count, @attribute);

}

/* -----------------------------------------------------------------------------
Calculate Grid Column Width
----------------------------------------------------------------------------- */

.calculate-grid-column(@screen-size, @column-index, @grid-columns-count, @attribute) when (@attribute = width) {

  @screen: replace(replace(@screen-size, 'screen-', '-'), 'null', '');

  .column@{screen}-@{column-index} {

    float: left;
    width: percentage((@column-index / @grid-columns-count));

  }

}

/* -----------------------------------------------------------------------------
Calculate Grid Column Push
----------------------------------------------------------------------------- */

.calculate-grid-column(@screen-size, @column-index, @grid-columns-count, @attribute) when (@attribute = push) {

  @screen: replace(replace(@screen-size, 'screen-', '-'), 'null', '');

  & when (@column-index = 0) {

    .column@{screen}-push-@{column-index} {

      left: auto;

    }

  }

  & when (@column-index > 0) {

    .column@{screen}-push-@{column-index} {

      left: percentage((@column-index / @grid-columns-count));

    }

  }

}

/* -----------------------------------------------------------------------------
Calculate Grid Column Pull
----------------------------------------------------------------------------- */

.calculate-grid-column(@screen-size, @column-index, @grid-columns-count, @attribute) when (@attribute = pull) {

  @screen: replace(replace(@screen-size, 'screen-', '-'), 'null', '');

  & when (@column-index = 0) {

    .column@{screen}-pull-@{column-index} {

      right: auto;

    }

  }

  & when (@column-index > 0) {

    .column@{screen}-pull-@{column-index} {

      right: -1 * percentage((@column-index / @grid-columns-count));

    }

  }

}

/* -----------------------------------------------------------------------------
Calculate Grid Column Push
----------------------------------------------------------------------------- */

.calculate-grid-column(@screen-size, @column-index, @grid-columns-count, @attribute) when (@attribute = offset) {

  @screen: replace(replace(@screen-size, 'screen-', '-'), 'null', '');

  & when (@column-index > 0) {

    .column@{screen}-offset-@{column-index} {

      margin-left: percentage((@column-index / @grid-columns-count));

    }

  }

}











/* -----------------------------------------------------------------------------
Layout Variant
----------------------------------------------------------------------------- */

.new-layout-variant (@element, @subclass, @property, @screen-size-scale) {

  @element-property: '@{element}-@{property}';
  @element-screen-size-scale: replace(e('@{element}-@{property}-@{screen-size-scale}'), '-null', '');
  @element-subclass-scale: replace(e('@{element}-@{subclass}-@{property}-scale'), '-null', '');

  & when not (@@element-property = null) {

    & when (@subclass = null) {

      & when (@screen-size-scale = null) {

        @{property}: @@element-property;

      }

      & when not (@screen-size-scale = null) {

        & when not (@@element-screen-size-scale = null) {

          @{property}: @@element-property * @@element-screen-size-scale;

        }

      }

    }

    & when not (@subclass = null) {

      & when not (@@element-subclass-scale = null) {

        & when (@screen-size-scale = null) {

          @{property}: @@element-property * @@element-subclass-scale;

        }

        & when not (@screen-size-scale = null) {

          & when not (@@element-screen-size-scale = null) {

            @{property}: @@element-property * @@element-screen-size-scale * @@element-subclass-scale;

          }

        }

      }

    }

  }

}


/* -----------------------------------------------------------------------------
Shape layout Variant
----------------------------------------------------------------------------- */

.spacing-layout-variant(@element, @subclass, @screen-size) {

  @class-prefix: replace(e('@{element}-@{subclass}'), '-null', '');
  @class-suffix: replace(replace(e('@{screen-size}'), 'scale-', ''), '-null', '');

  & when (@class-suffix = null) {

    &.@{class-prefix} {

      .new-layout-variant (@element, @subclass, margin-top, @screen-size);
      .new-layout-variant (@element, @subclass, margin-bottom, @screen-size);
      .new-layout-variant (@element, @subclass, margin-left, @screen-size);
      .new-layout-variant (@element, @subclass, margin-right, @screen-size);
      .new-layout-variant (@element, @subclass, padding-top, @screen-size);
      .new-layout-variant (@element, @subclass, padding-bottom, @screen-size);
      .new-layout-variant (@element, @subclass, padding-left, @screen-size);
      .new-layout-variant (@element, @subclass, padding-right, @screen-size);

    }

    &.@{class-prefix}-top {

      .new-layout-variant (@element, @subclass, margin-top, @screen-size);
      .new-layout-variant (@element, @subclass, padding-top, @screen-size);

    }

    &.@{class-prefix}-bottom {

      .new-layout-variant (@element, @subclass, margin-bottom, @screen-size);
      .new-layout-variant (@element, @subclass, padding-bottom, @screen-size);

    }

    &.@{class-prefix}-left {

      .new-layout-variant (@element, @subclass, margin-left, @screen-size);
      .new-layout-variant (@element, @subclass, padding-left, @screen-size);

    }

    &.@{class-prefix}-right {

      .new-layout-variant (@element, @subclass, margin-right, @screen-size);
      .new-layout-variant (@element, @subclass, padding-right, @screen-size);

    }

  }

  & when not (@class-suffix = null) {

    &.@{class-prefix},
    &.@{class-prefix}-@{class-suffix} {

      .new-layout-variant (@element, @subclass, margin-top, @screen-size);
      .new-layout-variant (@element, @subclass, margin-bottom, @screen-size);
      .new-layout-variant (@element, @subclass, margin-left, @screen-size);
      .new-layout-variant (@element, @subclass, margin-right, @screen-size);
      .new-layout-variant (@element, @subclass, padding-top, @screen-size);
      .new-layout-variant (@element, @subclass, padding-bottom, @screen-size);
      .new-layout-variant (@element, @subclass, padding-left, @screen-size);
      .new-layout-variant (@element, @subclass, padding-right, @screen-size);

    }

    &.@{class-prefix}-top,
    &.@{class-prefix}-top-@{class-suffix} {

      .new-layout-variant (@element, @subclass, margin-top, @screen-size);
      .new-layout-variant (@element, @subclass, padding-top, @screen-size);

    }

    &.@{class-prefix}-bottom,
    &.@{class-prefix}-bottom-@{class-suffix} {

      .new-layout-variant (@element, @subclass, margin-bottom, @screen-size);
      .new-layout-variant (@element, @subclass, padding-bottom, @screen-size);

    }

    &.@{class-prefix}-left,
    &.@{class-prefix}-left-@{class-suffix} {

      .new-layout-variant (@element, @subclass, margin-left, @screen-size);
      .new-layout-variant (@element, @subclass, padding-left, @screen-size);

    }

    &.@{class-prefix}-right,
    &.@{class-prefix}-right-@{class-suffix} {

      .new-layout-variant (@element, @subclass, margin-right, @screen-size);
      .new-layout-variant (@element, @subclass, padding-right, @screen-size);

    }

  }

}


















// THESE ARE CANDIDATE MIXINS FOR LAYOUT




/* -----------------------------------------------------------------------------
Layout Variant
----------------------------------------------------------------------------- */

.layout-property-variant (@class, @property, @screen-size) {

  @element-property: replace(e('@{class}-@{property}-@{screen-size}'), '-null', '');

  & when not (@@element-property = null) {

    @{property}: @@element-property;

  }

}

/* -----------------------------------------------------------------------------
Shape layout Variant
----------------------------------------------------------------------------- */

.layout-spacing-variant(@class, @screen-size) {

  .layout-property-variant(@class, margin-top, @screen-size);
  .layout-property-variant(@class, margin-bottom, @screen-size);
  .layout-property-variant(@class, margin-left, @screen-size);
  .layout-property-variant(@class, margin-right, @screen-size);
  .layout-property-variant(@class, padding-top, @screen-size);
  .layout-property-variant(@class, padding-bottom, @screen-size);
  .layout-property-variant(@class, padding-left, @screen-size);
  .layout-property-variant(@class, padding-right, @screen-size);

}

/* -----------------------------------------------------------------------------
Shape layout Variant
----------------------------------------------------------------------------- */

.layout-spacing-conditional-variant(@class, @screen-size) {

  @class-suffix: replace(e('-@{screen-size}'), '-null', '');

  & when (@screen-size = null) {

    &.@{class} {

      .layout-property-variant (@class, margin-top, @screen-size);
      .layout-property-variant (@class, margin-bottom, @screen-size);
      .layout-property-variant (@class, margin-left, @screen-size);
      .layout-property-variant (@class, margin-right, @screen-size);
      .layout-property-variant (@class, padding-top, @screen-size);
      .layout-property-variant (@class, padding-bottom, @screen-size);
      .layout-property-variant (@class, padding-left, @screen-size);
      .layout-property-variant (@class, padding-right, @screen-size);

    }

    &.@{class}-top {

      .layout-property-variant (@class, margin-top, @screen-size);
      .layout-property-variant (@class, padding-top, @screen-size);

    }

    &.@{class}-bottom {

      .layout-property-variant (@class, margin-bottom, @screen-size);
      .layout-property-variant (@class, padding-bottom, @screen-size);

    }

    &.@{class}-left {

      .layout-property-variant (@class, margin-left, @screen-size);
      .layout-property-variant (@class, padding-left, @screen-size);

    }

    &.@{class}-right {

      .layout-property-variant (@class, margin-right, @screen-size);
      .layout-property-variant (@class, padding-right, @screen-size);

    }

  }

  & when not (@screen-size = null) {

    &.@{class},
    &.@{class}@{class-suffix} {

      .layout-property-variant (@class, margin-top, @screen-size);
      .layout-property-variant (@class, margin-bottom, @screen-size);
      .layout-property-variant (@class, margin-left, @screen-size);
      .layout-property-variant (@class, margin-right, @screen-size);
      .layout-property-variant (@class, padding-top, @screen-size);
      .layout-property-variant (@class, padding-bottom, @screen-size);
      .layout-property-variant (@class, padding-left, @screen-size);
      .layout-property-variant (@class, padding-right, @screen-size);

    }

    &.@{class}-top,
    &.@{class}-top@{class-suffix} {

      .layout-property-variant (@class, margin-top, @screen-size);
      .layout-property-variant (@class, padding-top, @screen-size);

    }

    &.@{class}-bottom,
    &.@{class}-bottom@{class-suffix} {

      .layout-property-variant (@class, margin-bottom, @screen-size);
      .layout-property-variant (@class, padding-bottom, @screen-size);

    }

    &.@{class}-left,
    &.@{class}-left@{class-suffix} {

      .layout-property-variant (@class, margin-left, @screen-size);
      .layout-property-variant (@class, padding-left, @screen-size);

    }

    &.@{class}-right,
    &.@{class}-right@{class-suffix} {

      .layout-property-variant (@class, margin-right, @screen-size);
      .layout-property-variant (@class, padding-right, @screen-size);

    }

  }

}
