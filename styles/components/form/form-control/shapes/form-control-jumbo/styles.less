& when (@form-control-jumbo-enabled) {
  /* Form Control (.form-control-jumbo) */

  .form-control-jumbo {
    .element-text-size(form-control-jumbo, null);
    .element-spacing(form-control-jumbo, null, null);
    .property-variant(form-control-jumbo, height, null);
    .property-variant(form-control-jumbo, border-radius, null);

    /* Form Control Rounded (.form-control-rounded) */

    &.form-control-rounded {
      border-radius: 1000px;

      & when not (@form-control-jumbo-rounded-padding-horizontal-scale = null) {

        & when not (@form-control-jumbo-padding-left = null) {
          padding-left: @form-control-jumbo-padding-left * @form-control-jumbo-rounded-padding-horizontal-scale;
        }

        & when not (@form-control-jumbo-padding-right = null) {
          padding-right: @form-control-jumbo-padding-right * @form-control-jumbo-rounded-padding-horizontal-scale;
        }
      }
    }
  }

  /* Form Control Select (.form-control-select) */

  .form-control-select.form-control-jumbo {

    select {
      .element-text-size(form-control-jumbo, null);
      .element-spacing(form-control-jumbo, null, null);
      .property-variant(form-control-jumbo, height, null);

      & when not (@form-control-jumbo-padding-right = null) and not (@form-control-jumbo-caret-padding-right-offset = null) {
        padding-right: @form-control-jumbo-padding-right + @form-control-jumbo-caret-padding-right-offset;
      }
    }

    // Caret

    &:after {
      .property-variant(form-control-jumbo, right, padding-right, null, null);

      & when not (@form-control-jumbo-caret-width = null) {
        .triangle-size-width('down', @form-control-jumbo-caret-width);
      }

      & when not (@form-control-jumbo-caret-height = null) {
        .triangle-size-height('down', @form-control-jumbo-caret-height);
      }
    }

    /* Form Control Rounded (.form-control-rounded) */

    &.form-control-jumbo-rounded {

      select {

        & when not (@form-control-jumbo-padding-left = null) {
          padding-left: @form-control-jumbo-padding-left * @form-control-jumbo-rounded-padding-horizontal-scale;
        }

        & when not (@form-control-jumbo-padding-right = null) {

          & when (@form-control-jumbo-caret-padding-right-offset = null) {
            padding-right: @form-control-jumbo-padding-right * @form-control-jumbo-rounded-padding-horizontal-scale;
          }

          & when not (@form-control-jumbo-caret-padding-right-offset = null) {
            padding-right: (@form-control-jumbo-padding-right * @form-control-jumbo-rounded-padding-horizontal-scale) + @form-control-jumbo-caret-padding-right-offset;
          }
        }
      }

      // Caret

      &:after {

        & when not (@form-control-jumbo-padding-right = null) {
          right: @form-control-jumbo-padding-right * @form-control-jumbo-rounded-padding-horizontal-scale;
        }
      }
    }
  }

  & when (@form-control-group-enabled) and not (@form-control-jumbo-add-on-padding-horizontal = null) {
    /* Form Control Group */

    .form-control-group {
      /* Nested Form Control */

      &.form-control-jumbo {

        .form-control-group-add-on {

          &:first-child {
            .property-variant(form-control-jumbo-add-on, padding-right, padding-horizontal, null, null);
          }

          &:last-child {
            .property-variant(form-control-jumbo-add-on, padding-left, padding-horizontal, null, null);
          }
        }
      }
    }
  }
}

& when (@layout-screen-small-enabled) {

  @media (min-width: @layout-screen-small-min-width) {

    & when (@form-control-jumbo-enabled) and (@form-control-jumbo-screen-small-enabled) {
      /* Form Control (.form-control-jumbo) */

      .form-control-jumbo {
        .element-text-size(form-control-jumbo, screen-small);
        .element-spacing(form-control-jumbo, null, screen-small);
        .property-variant(form-control-jumbo, height, screen-small);
        .property-variant(form-control-jumbo, border-radius, screen-small);

        & when not (@form-control-jumbo-rounded-padding-horizontal-scale = null) {
          /* Form Control Rounded (.form-control-rounded) */

          &.form-control-rounded {

            & when not (@form-control-jumbo-padding-left-screen-small = null) {
              padding-left: @form-control-jumbo-padding-left-screen-small * @form-control-jumbo-rounded-padding-horizontal-scale;
            }

            & when not (@form-control-jumbo-padding-right-screen-small = null) {
              padding-right: @form-control-jumbo-padding-right-screen-small * @form-control-jumbo-rounded-padding-horizontal-scale;
            }
          }
        }
      }

      /* Form Control Select (.form-control-select) */

      .form-control-select.form-control-jumbo {

        select {
          .element-spacing(form-control-jumbo, null, screen-small);
          .element-text-size(form-control-jumbo, screen-small);
          .property-variant(form-control-jumbo, height, screen-small);

          & when not (@form-control-jumbo-padding-right-screen-small = null) and not (@form-control-jumbo-caret-padding-right-offset-screen-small = null) {
            padding-right: @form-control-jumbo-padding-right-screen-small + @form-control-jumbo-caret-padding-right-offset-screen-small;
          }
        }

        // Caret

        &:after {
          .property-variant(form-control-jumbo, right, padding-right, null, screen-small);

          & when not (@form-control-jumbo-caret-width = null) and not (@form-control-jumbo-caret-width-screen-small = null) {
            .triangle-size-width('down', (@form-control-jumbo-caret-width-screen-small));
          }

          & when not (@form-control-jumbo-caret-height = null) and not (@form-control-jumbo-caret-height-screen-small = null) {
            .triangle-size-height('down', (@form-control-jumbo-caret-height-screen-small));
          }
        }

        & when not (@form-control-jumbo-rounded-padding-horizontal-scale = null) {
          /* Form Control Rounded (.form-control-rounded) */

          &.form-control-jumbo-rounded {

            select {

              & when not (@form-control-jumbo-padding-left-screen-small = null) {
                padding-left: @form-control-jumbo-padding-left-screen-small * @form-control-jumbo-rounded-padding-horizontal-scale;
              }

              & when not (@form-control-jumbo-padding-right-screen-small = null) {

                & when (@form-control-jumbo-caret-padding-right-offset-screen-small = null) {
                  padding-right: @form-control-jumbo-padding-right-screen-small * @form-control-jumbo-rounded-padding-horizontal-scale;
                }

                & when not (@form-control-jumbo-caret-padding-right-offset-screen-small = null) {
                  padding-right: (@form-control-jumbo-padding-right-screen-small * @form-control-jumbo-rounded-padding-horizontal-scale) + @form-control-jumbo-caret-padding-right-offset-screen-small;
                }
              }
            }

            // Caret

            &:after {

              & when not (@form-control-jumbo-padding-right-screen-small = null) {
                right: @form-control-jumbo-padding-right-screen-small * @form-control-jumbo-rounded-padding-horizontal-scale;
              }
            }
          }
        }
      }

      & when (@form-control-group-enabled) and not (@form-control-jumbo-add-on-padding-horizontal = null) and not (@form-control-jumbo-add-on-padding-horizontal-screen-small = null) {
        /* Form Control Group */

        .form-control-group {
          /* Nested Form Control */

          &.form-control-jumbo {

            .form-control-group-add-on {

              &:first-child {
                padding-right: @form-control-jumbo-add-on-padding-horizontal-screen-small;
              }

              &:last-child {
                padding-left: @form-control-jumbo-add-on-padding-horizontal-screen-small;
              }
            }
          }
        }
      }
    }
  }
}

& when (@layout-screen-medium-enabled) {

  @media (min-width: @layout-screen-medium-min-width) {

    & when (@form-control-jumbo-enabled) and (@form-control-jumbo-screen-medium-enabled) {
      /* Form Control (.form-control-jumbo) */

      .form-control-jumbo {
        .element-text-size(form-control-jumbo, screen-medium);
        .element-spacing(form-control-jumbo, null, screen-medium);
        .property-variant(form-control-jumbo, height, screen-medium);
        .property-variant(form-control-jumbo, border-radius, screen-medium);

        & when not (@form-control-jumbo-rounded-padding-horizontal-scale = null) {
          /* Form Control Rounded (.form-control-rounded) */

          &.form-control-rounded {

            & when not (@form-control-jumbo-padding-left-screen-medium = null) {
              padding-left: @form-control-jumbo-padding-left-screen-medium * @form-control-jumbo-rounded-padding-horizontal-scale;
            }

            & when not (@form-control-jumbo-padding-right-screen-medium = null) {
              padding-right: @form-control-jumbo-padding-right-screen-medium * @form-control-jumbo-rounded-padding-horizontal-scale;
            }
          }
        }
      }

      /* Form Control Select (.form-control-select) */

      .form-control-select.form-control-jumbo {

        select {
          .element-spacing(form-control-jumbo, null, screen-medium);
          .element-text-size(form-control-jumbo, screen-medium);
          .property-variant(form-control-jumbo, height, screen-medium);

          & when not (@form-control-jumbo-padding-right-screen-medium = null) and not (@form-control-jumbo-caret-padding-right-offset-screen-medium = null) {
            padding-right: @form-control-jumbo-padding-right-screen-medium + @form-control-jumbo-caret-padding-right-offset-screen-medium;
          }
        }

        // Caret

        &:after {
          .property-variant(form-control-jumbo, right, padding-right, null, screen-medium);

          & when not (@form-control-jumbo-caret-width = null) and not (@form-control-jumbo-caret-width-screen-medium = null) {
            .triangle-size-width('down', (@form-control-jumbo-caret-width-screen-medium));
          }

          & when not (@form-control-jumbo-caret-height = null) and not (@form-control-jumbo-caret-height-screen-medium = null) {
            .triangle-size-height('down', (@form-control-jumbo-caret-height-screen-medium));
          }
        }

        & when not (@form-control-jumbo-rounded-padding-horizontal-scale = null) {
          /* Form Control Rounded (.form-control-rounded) */

          &.form-control-jumbo-rounded {

            select {

              & when not (@form-control-jumbo-padding-left-screen-medium = null) {
                padding-left: @form-control-jumbo-padding-left-screen-medium * @form-control-jumbo-rounded-padding-horizontal-scale;
              }

              & when not (@form-control-jumbo-padding-right-screen-medium = null) {

                & when (@form-control-jumbo-caret-padding-right-offset-screen-medium = null) {
                  padding-right: @form-control-jumbo-padding-right-screen-medium * @form-control-jumbo-rounded-padding-horizontal-scale;
                }

                & when not (@form-control-jumbo-caret-padding-right-offset-screen-medium = null) {
                  padding-right: (@form-control-jumbo-padding-right-screen-medium * @form-control-jumbo-rounded-padding-horizontal-scale) + @form-control-jumbo-caret-padding-right-offset-screen-medium;
                }
              }
            }

            // Caret

            &:after {

              & when not (@form-control-jumbo-padding-right-screen-medium = null) {
                right: @form-control-jumbo-padding-right-screen-medium * @form-control-jumbo-rounded-padding-horizontal-scale;
              }
            }
          }
        }
      }

      & when (@form-control-group-enabled) and not (@form-control-jumbo-add-on-padding-horizontal = null) and not (@form-control-jumbo-add-on-padding-horizontal-screen-medium = null) {
        /* Form Control Group */

        .form-control-group {
          /* Nested Form Control */

          &.form-control-jumbo {

            .form-control-group-add-on {

              &:first-child {
                padding-right: @form-control-jumbo-add-on-padding-horizontal-screen-medium;
              }

              &:last-child {
                padding-left: @form-control-jumbo-add-on-padding-horizontal-screen-medium;
              }
            }
          }
        }
      }
    }
  }
}

& when (@layout-screen-large-enabled) {

  @media (min-width: @layout-screen-large-min-width) {

    & when (@form-control-jumbo-enabled) and (@form-control-jumbo-screen-large-enabled) {
      /* Form Control (.form-control-jumbo) */

      .form-control-jumbo {
        .element-text-size(form-control-jumbo, screen-large);
        .element-spacing(form-control-jumbo, null, screen-large);
        .property-variant(form-control-jumbo, height, screen-large);
        .property-variant(form-control-jumbo, border-radius, screen-large);

        & when not (@form-control-jumbo-rounded-padding-horizontal-scale = null) {
          /* Form Control Rounded (.form-control-rounded) */

          &.form-control-rounded {

            & when not (@form-control-jumbo-padding-left-screen-large = null) {
              padding-left: @form-control-jumbo-padding-left-screen-large * @form-control-jumbo-rounded-padding-horizontal-scale;
            }

            & when not (@form-control-jumbo-padding-right-screen-large = null) {
              padding-right: @form-control-jumbo-padding-right-screen-large * @form-control-jumbo-rounded-padding-horizontal-scale;
            }
          }
        }
      }

      /* Form Control Select (.form-control-select) */

      .form-control-select.form-control-jumbo {

        select {
          .element-spacing(form-control-jumbo, null, screen-large);
          .element-text-size(form-control-jumbo, screen-large);
          .property-variant(form-control-jumbo, height, screen-large);

          & when not (@form-control-jumbo-padding-right-screen-large = null) and not (@form-control-jumbo-caret-padding-right-offset-screen-large = null) {
            padding-right: @form-control-jumbo-padding-right-screen-large + @form-control-jumbo-caret-padding-right-offset-screen-large;
          }
        }

        // Caret

        &:after {
          .property-variant(form-control-jumbo, right, padding-right, null, screen-large);

          & when not (@form-control-jumbo-caret-width = null) and not (@form-control-jumbo-caret-width-screen-large = null) {
            .triangle-size-width('down', (@form-control-jumbo-caret-width-screen-large));
          }

          & when not (@form-control-jumbo-caret-height = null) and not (@form-control-jumbo-caret-height-screen-large = null) {
            .triangle-size-height('down', (@form-control-jumbo-caret-height-screen-large));
          }
        }

        & when not (@form-control-jumbo-rounded-padding-horizontal-scale = null) {
          /* Form Control Rounded (.form-control-rounded) */

          &.form-control-jumbo-rounded {

            select {

              & when not (@form-control-jumbo-padding-left-screen-large = null) {
                padding-left: @form-control-jumbo-padding-left-screen-large * @form-control-jumbo-rounded-padding-horizontal-scale;
              }

              & when not (@form-control-jumbo-padding-right-screen-large = null) {

                & when (@form-control-jumbo-caret-padding-right-offset-screen-large = null) {
                  padding-right: @form-control-jumbo-padding-right-screen-large * @form-control-jumbo-rounded-padding-horizontal-scale;
                }

                & when not (@form-control-jumbo-caret-padding-right-offset-screen-large = null) {
                  padding-right: (@form-control-jumbo-padding-right-screen-large * @form-control-jumbo-rounded-padding-horizontal-scale) + @form-control-jumbo-caret-padding-right-offset-screen-large;
                }
              }
            }

            // Caret

            &:after {

              & when not (@form-control-jumbo-padding-right-screen-large = null) {
                right: @form-control-jumbo-padding-right-screen-large * @form-control-jumbo-rounded-padding-horizontal-scale;
              }
            }
          }
        }
      }

      & when (@form-control-group-enabled) and not (@form-control-jumbo-add-on-padding-horizontal = null) and not (@form-control-jumbo-add-on-padding-horizontal-screen-large = null) {
        /* Form Control Group */

        .form-control-group {
          /* Nested Form Control */

          &.form-control-jumbo {

            .form-control-group-add-on {

              &:first-child {
                padding-right: @form-control-jumbo-add-on-padding-horizontal-screen-large;
              }

              &:last-child {
                padding-left: @form-control-jumbo-add-on-padding-horizontal-screen-large;
              }
            }
          }
        }
      }
    }
  }
}

& when (@layout-screen-jumbo-enabled) {

  @media (min-width: @layout-screen-jumbo-min-width) {

    & when (@form-control-jumbo-enabled) and (@form-control-jumbo-screen-jumbo-enabled) {
      /* Form Control (.form-control-jumbo) */

      .form-control-jumbo {
        .element-text-size(form-control-jumbo, screen-jumbo);
        .element-spacing(form-control-jumbo, null, screen-jumbo);
        .property-variant(form-control-jumbo, height, screen-jumbo);
        .property-variant(form-control-jumbo, border-radius, screen-jumbo);

        & when not (@form-control-jumbo-rounded-padding-horizontal-scale = null) {
          /* Form Control Rounded (.form-control-rounded) */

          &.form-control-rounded {

            & when not (@form-control-jumbo-padding-left-screen-jumbo = null) {
              padding-left: @form-control-jumbo-padding-left-screen-jumbo * @form-control-jumbo-rounded-padding-horizontal-scale;
            }

            & when not (@form-control-jumbo-padding-right-screen-jumbo = null) {
              padding-right: @form-control-jumbo-padding-right-screen-jumbo * @form-control-jumbo-rounded-padding-horizontal-scale;
            }
          }
        }
      }

      /* Form Control Select (.form-control-select) */

      .form-control-select.form-control-jumbo {

        select {
          .element-spacing(form-control-jumbo, null, screen-jumbo);
          .element-text-size(form-control-jumbo, screen-jumbo);
          .property-variant(form-control-jumbo, height, screen-jumbo);

          & when not (@form-control-jumbo-padding-right-screen-jumbo = null) and not (@form-control-jumbo-caret-padding-right-offset-screen-jumbo = null) {
            padding-right: @form-control-jumbo-padding-right-screen-jumbo + @form-control-jumbo-caret-padding-right-offset-screen-jumbo;
          }
        }

        // Caret

        &:after {
          .property-variant(form-control-jumbo, right, padding-right, null, screen-jumbo);

          & when not (@form-control-jumbo-caret-width = null) and not (@form-control-jumbo-caret-width-screen-jumbo = null) {
            .triangle-size-width('down', (@form-control-jumbo-caret-width-screen-jumbo));
          }

          & when not (@form-control-jumbo-caret-height = null) and not (@form-control-jumbo-caret-height-screen-jumbo = null) {
            .triangle-size-height('down', (@form-control-jumbo-caret-height-screen-jumbo));
          }
        }

        & when not (@form-control-jumbo-rounded-padding-horizontal-scale = null) {
          /* Form Control Rounded (.form-control-rounded) */

          &.form-control-jumbo-rounded {

            select {

              & when not (@form-control-jumbo-padding-left-screen-jumbo = null) {
                padding-left: @form-control-jumbo-padding-left-screen-jumbo * @form-control-jumbo-rounded-padding-horizontal-scale;
              }

              & when not (@form-control-jumbo-padding-right-screen-jumbo = null) {

                & when (@form-control-jumbo-caret-padding-right-offset-screen-jumbo = null) {
                  padding-right: @form-control-jumbo-padding-right-screen-jumbo * @form-control-jumbo-rounded-padding-horizontal-scale;
                }

                & when not (@form-control-jumbo-caret-padding-right-offset-screen-jumbo = null) {
                  padding-right: (@form-control-jumbo-padding-right-screen-jumbo * @form-control-jumbo-rounded-padding-horizontal-scale) + @form-control-jumbo-caret-padding-right-offset-screen-jumbo;
                }
              }
            }

            // Caret

            &:after {

              & when not (@form-control-jumbo-padding-right-screen-jumbo = null) {
                right: @form-control-jumbo-padding-right-screen-jumbo * @form-control-jumbo-rounded-padding-horizontal-scale;
              }
            }
          }
        }
      }

      & when (@form-control-group-enabled) and not (@form-control-jumbo-add-on-padding-horizontal = null) and not (@form-control-jumbo-add-on-padding-horizontal-screen-jumbo = null) {
        /* Form Control Group */

        .form-control-group {
          /* Nested Form Control */

          &.form-control-jumbo {

            .form-control-group-add-on {

              &:first-child {
                padding-right: @form-control-jumbo-add-on-padding-horizontal-screen-jumbo;
              }

              &:last-child {
                padding-left: @form-control-jumbo-add-on-padding-horizontal-screen-jumbo;
              }
            }
          }
        }
      }
    }
  }
}
